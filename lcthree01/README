
See top level README for info on documentation and tools.

so see my lc3 repo for more on the little computer 3 tools and sim

https://en.wikipedia.org/wiki/LC-3

No not my processor at all, just an implementation of a simulator.

This directory contains just enough instructions implemented to
do some counting and then blinking.  cheated a little used a trap
to increment a counter and fed that counter out to the top.

dont know how to tell yosys where to find include files so you are
a little stuck.  with cdl, I had my lc3 assembler output a file that
could be included into the cdl. tried that with the verlog end
(program.h included into sram.v) but yosys gives a cant open include
file error.

you can see in program.cdl

case 16h3000: { out_data = 0x9040; }
case 16h3001: { out_data = 0x5060; }
case 16h3002: { out_data = 0x9000; }
case 16h3003: { out_data = 0x103F; }
case 16h3004: { out_data = 0x0BFE; }
case 16h3005: { out_data = 0xF025; }
case 16h3006: { out_data = 0x0FF9; }

want that to be come program.h

16'h3000: out_data__var = 0x9040;
16'h3001: out_data__var = 0x5060;
16'h3002: out_data__var = 0x9000;
16'h3003: out_data__var = 0x103F;
16'h3004: out_data__var = 0x0BFE;
16'h3005: out_data__var = 0xF025;
16'h3006: out_data__var = 0x0FF9;

and include that into sram.v which is a copy of csram.v with the
middle of the switch replaced with the include.

as of this writing the program running on the lc-3 processor in the
fpga is

outer:
not r0,r1
and r0,r1,#0
not r0,r0
inner:
add r0,r0,#0xFFFF
brnp inner
trap 0x25
brnzp outer

the first not and and make r0 a 0x0000.  then notting it makes it 0xFFFF
have a loop that counts that down to zero. trap 0x25 increments the
led counter and loop to the beginning (yes there is a shortcut that could
be taken since r0 is 0xFFFF now)

I can/should go back and change the implementation, not flip so many
gates, etc and see if it changes things.  oh, and add the rest of the
instructions.  for educational purposes the lc-3 authors created a
microcoded monstrosity to demonstrate microcoding.  in verilog or other
you can code up a not-microcoded implementation in dozens/hundreds of
lines of code.
